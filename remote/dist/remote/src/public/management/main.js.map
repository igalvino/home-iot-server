{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/login/login.component.html","webpack:///./src/app/servers/servers.component.html","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/servers/servers.component.css","webpack:///./src/app/servers/servers.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<router-outlet>\\n</router-outlet>\\n\"","module.exports = \"<div id=\\\"login-page\\\" style=\\\"text-align:center\\\">\\n    <h1>\\n        You don't look like a manager!\\n        Prove it!\\n    </h1>\\n    <img id=\\\"haim\\\" width=\\\"200\\\" height=\\\"220\\\" alt=\\\"casanet REAL Logo\\\" src=\\\"assets/28386247.jpg\\\">\\n<ul>\\n    <li>\\n        <div class=\\\"container\\\">\\n            <ul>\\n                <li>\\n                    <label for=\\\"email\\\"><b>Email</b></label>\\n                    <input type=\\\"text\\\" placeholder=\\\"Enter Email\\\" [(ngModel)]=\\\"myLoginReq.email\\\">\\n                </li>\\n                <li>\\n                    <label for=\\\"psw\\\"><b>Password</b></label>\\n                    <input type=\\\"password\\\" placeholder=\\\"Enter Password\\\" [(ngModel)]=\\\"myLoginReq.password\\\">\\n                </li>\\n                <button (click)=\\\"postLoginRequest(myLoginReq)\\\">\\n                </button>\\n            </ul>\\n        </div>\\n    </li>\\n</ul>\\n</div>\\n\\n\\n<!-- <div class=\\\"container\\\">\\n<ul>\\n  <li>\\n      <label for=\\\"email\\\"><b>Email</b></label>\\n      <input type=\\\"text\\\" placeholder=\\\"Enter Email\\\" [(ngModel)]=\\\"myLoginReq.email\\\">\\n  </li>\\n  <li>\\n      <label for=\\\"psw\\\"><b>Password</b></label>\\n      <input type=\\\"password\\\" placeholder=\\\"Enter Password\\\" [(ngModel)] =\\\"myLoginReq.password\\\">\\n  </li>\\n    <button (click)=\\\"postLoginRequest(myLoginReq)\\\">\\n    </button>\\n</ul>\\n</div> -->\"","module.exports = \"<div id=\\\"servers-page\\\">\\n  <!-- <img src=\\\"assets/iot-background.png\\\">  -->\\n  <ul class=\\\"servers\\\">\\n    <li style=\\\"width: 300px;\\\" *ngFor=\\\"let server of servers\\\" [class.selected]=\\\"server === selectedServer\\\"\\n      (click)=\\\"onSelect(server)\\\">\\n      <span class=\\\"badge\\\" style=\\\"margin: auto; width: 40px;\\\"> {{server.localServerId}}</span>\\n      <span style=\\\"margin: auto; width: 150px;\\\"> {{server.displayName}}</span>\\n      <span [ngClass]=\\\"server.connectionStatus === true ? 'status-on' : 'status-off'\\\">&nbsp; &nbsp; &nbsp; </span>\\n    </li>\\n  </ul>\\n  <div *ngIf=\\\"selectedServer\\\">\\n    <h2>{{selectedServer.displayName}}</h2>\\n    <div><span>id: </span>{{selectedServer.localServerId}}</div>\\n    <div><span>macAddress: </span>{{selectedServer.macAddress}}</div>\\n    <div><span>Connection Status: </span>{{selectedServer.connectionStatus}}</div>\\n    <div>\\n      <label>edit name:\\n        <input [(ngModel)]=\\\"selectedServer.displayName\\\" placeholder=\\\"enter new name here\\\" />\\n      </label>\\n      <label>edit users:\\n        <input [(ngModel)]=\\\"selectedServer.validUsers\\\" placeholder=\\\"update users here\\\" />\\n      </label>\\n      <button (click)=\\\"editServer(selectedServer)\\\">Edit Server</button>\\n      <button (click)=\\\"authKeyRequest(selectedServer)\\\">auth</button>\\n      <button class=\\\"delete-button\\\" (click)=\\\"deleteServerRequest(selectedServer)\\\"></button>\\n    </div>\\n  </div>\\n  <div id=\\\"inputServer\\\">\\n    <label>Enter name: <input type=\\\"field\\\" [(ngModel)]=\\\"NewServer.displayName\\\" /></label>\\n    <label>Enter Mac: <input type=\\\"field\\\" [(ngModel)]=\\\"NewServer.macAddress\\\" /></label>\\n    <label>Enter users: <input type=\\\"field\\\" [(ngModel)]=\\\"NewServer.validUsers\\\" /></label>\\n    <button (click)=\\\"postNewServer(NewServer)\\\">Add Server</button>\\n  </div>\\n\\n</div>\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { ServersComponent } from \"./servers/servers.component\";\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'dashboard/servers', component: ServersComponent },\n  {path: '**', redirectTo: 'dashboard/servers' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {\n    useHash: true,\n  })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'remote-dashboard';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from \"@angular/forms\";\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport { HttpClientModule , HttpHandler } from '@angular/common/http';\nimport { ServersComponent } from './servers/servers.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    ServersComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    \n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n  exports : [ServersComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { loginReq } from \"../loginRequest\";\nimport { HttpClient } from '@angular/common/http';\nimport { THIS_EXPR } from '@angular/compiler/src/output/output_ast';\nimport { Router } from '@angular/router';\nimport Swal from 'sweetalert2';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n\n  public login_url = \"/API/administration/auth/login\";\n  private \n  myLoginReq: loginReq = {\n    email: \"\",//\"f8a9632f97ff@casa-net.online\",\n    password: \"\"//\"casanet\"\n  }\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  \n\npublic async postLoginRequest(loginRequest: loginReq){\n  try {\n    await this.http.post(this.login_url, {\n      email : loginRequest.email,\n      password : loginRequest.password\n    }).toPromise();\n    console.log(`very good ${loginRequest.email}`);\n    this.router.navigate(['/dashboard/servers']);\n  }\n   catch (error) {\n    Swal.fire({type: 'error', title: 'Failed to connect :( ' , showCloseButton: true, html:   \n     '<b> please check your details </b>'})\n    console.log(error);\n  }\n} \n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NlcnZlcnMvc2VydmVycy5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit, ErrorHandler } from '@angular/core';\n// import { Servers } from '../mockServers';\nimport { HttpClient, HttpErrorResponse, HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { LocalServer } from '../../../../remote/src/models/sharedInterfaces';\nimport { Local } from 'protractor/built/driverProviders';\nimport { Router } from '@angular/router';\nimport { LoginComponent } from '../login/login.component';\nimport swal, { SweetAlertResult } from 'sweetalert2';\n\n@Component({\n  selector: 'app-servers',\n  templateUrl: './servers.component.html',\n  styleUrls: ['./servers.component.css']\n})\nexport class ServersComponent implements OnInit {\n\n  servers: LocalServer[];\n  selectedServer: LocalServer;\n\n  NewServer: LocalServer = {\n    connectionStatus: false,\n    displayName: '',\n    localServerId: '',\n    macAddress: '',\n    validUsers: []\n  };\n\n\n\n  servers_url: string = \"/API/servers\";\n  constructor(private http: HttpClient, private router: Router) {\n    this.getServersFromServer();\n\n  }\n\n  ngOnInit() {\n  }\n\n  async getServersFromServer() {\n    try {\n      this.servers = await this.http.get<LocalServer[]>(this.servers_url).toPromise();\n\n    }\n    catch (error) {\n      if (error.status === 401 || error.status === 403)\n        this.router.navigate(['/API/administration/auth/login']);\n    }\n  }\n\n  async deleteServerRequest(ServerToDelete: LocalServer) {\n    this.servers.forEach(async server => {\n      if (ServerToDelete.localServerId == server.localServerId) {\n\n        try {\n          await this.http.delete<LocalServer>(this.servers_url + \"/\" + ServerToDelete.localServerId).toPromise();\n        }\n        catch (error) { }\n      }\n    });\n  }\n\n\n\n  async postNewServer(NewServer: LocalServer) {\n\n    try {\n      await this.http.post(this.servers_url, {\n        displayName: NewServer.displayName,\n        localServerId: NewServer.localServerId,\n        macAddress: NewServer.macAddress,\n        validUsers: NewServer.validUsers,\n        connectionStatus: NewServer.connectionStatus\n      }).toPromise();\n      this.servers.push(NewServer);\n    }\n    catch (error) {\n      console.log(error);\n    }\n  }\n\n\n  async editServer(server: LocalServer) {\n    this.servers.forEach(async serverToEdit => {\n\n      if (serverToEdit.localServerId == server.localServerId) {\n\n        try {\n          await this.http.put<LocalServer>(this.servers_url + \"/\" + server.localServerId, serverToEdit).toPromise();\n\n        }\n        catch (error) {\n\n        }\n      }\n    });\n\n  }\n\n  async authKeyRequest(server: LocalServer) {\n    this.servers.forEach(async serv => {\n\n      if (serv.localServerId == server.localServerId) {\n\n        try {\n          const apikey = await this.http.post<string>(`${this.servers_url}/auth/${server.localServerId}`, {}).toPromise();\n          swal.fire({type: 'info', title: 'key for authentication' , showCloseButton: true, html:   \n          apikey + '<br/><br/>'  + \n           '<b> CAUTION: you may be disconnected now  </b>'})\n           \n        }\n        catch (error) {\n\n        }\n      }\n    });\n  }\n\n  onSelect(server: LocalServer): void {\n    this.selectedServer = server;\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}